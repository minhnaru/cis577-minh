#--------------------------------------------------------# Name: Minh Nguyen# Student ID: 01597092# CIS 577: Socket Web Server MultiThread# Date Create: Oct 23, 2016# Professor: Paul Gracia#--------------------------------------------------------#import socket modulefrom socket import *import threadingclass ClientThread(threading.Thread):     def __init__(self, connect, address):          threading.Thread.__init__(self)          self.connectionSocket = connect          self.addr = address     def run(self):          while True:               try:                    message = connectionSocket.recv(1024)                    if not message:                         break                    #print 'message: \n', message                    filename = message.split()[1]                    f = open(filename[1:])                    outputdata = f.read()                    #print 'outputdata: ', outputdata                    #Send one HTTP header line into socket                    connectionSocket.send('HTTP/1.1 200 OK\r\n\r\n')                    print 'New Client from: ', addr                    print 'File requested: ', filename                    #Send the content of the requested file to the client                    for i in range(0, len(outputdata)):                         connectionSocket.send(outputdata[i])               except (IOError, IndexError):                    #Send response message for file not found                    print 'New Client from: ', addr                    print 'File requested: ', filename                    print '404 Not Found'                    connectionSocket.send('HTTP/1.1 404 Not Found\r\n\r\n')                    connectionSocket.send('404 Not Found')#if __name__ == '__main__':serverSocket = socket(AF_INET, SOCK_STREAM)serverPort = 8888#Prepare a sever socket#set-up socket connectionserverSocket.bind(('',serverPort))#the server can try max of one connect request before ending connectionserverSocket.listen(10)threads = []while True:     #Establish the connection     print 'Ready to serve...'     connectionSocket, addr = serverSocket.accept()     client_thread = ClientThread(connectionSocket, addr)     # Daemon - a boolean value must be set before start() is called, otherwise RuntimeError     client_thread.setDaemon(True)     client_thread.start()     #client_thread.setDaemon(True)     threads.append(client_thread)     # wait all threads finish before closing the connectionserverSocket.close()